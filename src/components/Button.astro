---
interface Props {
  href?: string;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  class?: string;
  [x: string]: any;
}

const {
  href,
  variant = 'primary',
  size = 'md',
  class: className = '',
  ...rest
} = Astro.props;

// Define classes based on variant and size
const variantClasses = {
  primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
  secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
  outline: 'bg-transparent border border-current text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20 focus:ring-blue-500',
  ghost: 'bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800 focus:ring-gray-500'
};

const sizeClasses = {
  sm: 'text-sm px-3 py-1.5',
  md: 'text-base px-4 py-2',
  lg: 'text-lg px-6 py-3'
};

const classes = [
  'inline-flex items-center justify-center rounded-md font-medium transition-colors',
  'focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-900',
  'disabled:opacity-50 disabled:pointer-events-none',
  variantClasses[variant],
  sizeClasses[size],
  className
].join(' ');

const Tag = href ? 'a' : 'button';
---

<Tag
  href={href}
  class={classes}
  {...rest}
>
  <slot />
</Tag>

<style>
  /* Add any additional styles here */
  a, button {
    cursor: pointer;
  }
</style>